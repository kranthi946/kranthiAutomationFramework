In **Selenium**, "waits" are mechanisms that allow your test script to wait for certain conditions to be met before proceeding further. These are crucial in cases where the web elements may not be immediately available due to loading times, animations, or AJAX requests. Selenium provides three types of waits:

### 1. **Implicit Wait**
   - **Purpose:** Tells Selenium to wait for a certain amount of time when trying to find an element if it's not immediately available. It is applied globally, meaning it will apply to all elements.
   - **Default Time:** By default, the `Implicit Wait` is set to 0.
   - **Behavior:** If an element is not found immediately, WebDriver will keep trying for the specified time period before throwing a `NoSuchElementException`.

   ```java
   // Set implicit wait for 10 seconds
   driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

   // After this, every element lookup will wait for up to 10 seconds
   WebElement element = driver.findElement(By.id("example"));
   ```

   - **When to Use:** It's useful when you know that elements might take a little time to appear on the page, but you don't want to keep waiting for an explicit condition to be true.

### 2. **Explicit Wait**
   - **Purpose:** Waits for a specific condition to be true (e.g., an element to become clickable, visible, or present). Unlike implicit waits, explicit waits can be applied to specific elements.
   - **Behavior:** It allows the script to wait until a specific condition is met (like element visibility) or the maximum timeout is reached. It can wait for different conditions (e.g., element to be clickable, element to be visible, etc.).

   ```java
   // Create a WebDriverWait object with a 10-second timeout
   WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

   // Wait until the element is clickable
   WebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.id("submitButton")));
   element.click();
   ```

   - **Common Conditions with `ExpectedConditions`:**
     - `visibilityOfElementLocated()`
     - `elementToBeClickable()`
     - `presenceOfElementLocated()`
     - `alertIsPresent()`
     - `textToBePresentInElement()`

   - **When to Use:** Use explicit waits for scenarios where you want to wait for a specific element to be in a certain state (e.g., visible, clickable, etc.).

### 3. **Fluent Wait**
   - **Purpose:** Similar to explicit wait, but with more control over the polling frequency (i.e., how often to check if the condition is met) and the timeout duration.
   - **Behavior:** Fluent wait waits for a condition to occur within a defined polling interval, and it allows ignoring certain types of exceptions while waiting.

   ```java
FluentWait<WebDriver> wait = new FluentWait<>(driver)

			.withTimeout(Duration.ofSeconds(10))  // Total timeout
			.pollingEvery(Duration.ofMillis(500))  // Poll interval (500ms)
			.ignoring(NoSuchElementException.class)
			.withMessage("this is fluent wait");  // Ignore specific exceptions

	WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("example")));
element.click();
   ```

   - **When to Use:** Use fluent wait when you want to fine-tune how often Selenium checks for a condition, and to ignore specific exceptions (like `NoSuchElementException`) during the wait.

---

### **Comparison Summary:**

| Type           | When to Use                                         | Example Code |
|----------------|-----------------------------------------------------|--------------|
| **Implicit Wait** | When elements are expected to load slowly or are dynamically rendered. | `driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));` |
| **Explicit Wait** | For waiting on specific conditions like visibility, clickability, etc. | `WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));` |
| **Fluent Wait**  | When you need more control over polling intervals and exception handling. | `FluentWait<WebDriver> wait = new FluentWait<>(driver)...` |

### Key Differences:

- **Implicit Wait**: Applied globally to all elements.
- **Explicit Wait**: Applied to specific elements with conditions (e.g., visibility, clickability).
- **Fluent Wait**: Like explicit wait but with more control over polling intervals and exception handling.

### Best Practices:
- **Use Implicit Wait** for general wait times on elements when you expect some variability in load times.
- **Use Explicit Wait** when you need to wait for specific conditions (like visibility or clickability).
- **Use Fluent Wait** when you need to customize the polling interval and handle exceptions selectively during the wait.

