Yes, your description is mostly correct, but let's break it down for clarity:

### 1. **Data Driven Framework**:
   - This type of framework is used to separate test data from test logic. The test data is typically stored in external sources like Excel, CSV, or databases, and the tests can be run multiple times with different sets of data.
   - In this case, your test scripts would read data from an external source and then execute the same steps with different input data.

### 2. **Page Object Model (POM)**:
   - **POM** is a design pattern used in Selenium WebDriver (and other web automation tools). The idea behind POM is to create a separate class for each web page or web component in your application. Each class (page object) will contain methods that represent the actions that can be performed on that page, and the locators for the elements on that page.
   - By using POM, you separate the test logic from the UI logic, making your tests more maintainable and easier to read.

### 3. **Page Factory**:
   - **Page Factory** is a class in Selenium that supports the POM pattern. It allows you to initialize elements using annotations like `@FindBy` (to locate elements) and `@FindBys` (to locate multiple elements).
   - It works in conjunction with POM, but it makes element initialization more concise and readable, improving test maintainability.

### Putting it all together:
- **Data-Driven**: The test framework reads data (e.g., from an Excel file) and iterates over it for each test case, using different inputs.
- **POM**: Each web page (or significant UI component) has its own page object class.
- **Page Factory**: Helps with the efficient initialization of page elements in the POM.

### Example Workflow:
1. **Page Object**: You would have a `LoginPage` class for login-related actions.
2. **Test**: The test reads data (e.g., username, password) from an external file.
3. **Execution**: The test script uses the Page Object (LoginPage) to perform actions like entering credentials and clicking login.
4. **Page Factory**: The elements on `LoginPage` (like username field, password field, login button) are initialized using `@FindBy` annotations.

### Conclusion:
So, your statement **"Data Driven Framework using Page Object Model (POM) design pattern with Page Factory"** is **correct**, but it's worth noting that Page Factory is a tool that supports POM in the Selenium framework. If you want to be more precise, you can say:

**"Data-Driven Framework with Selenium using the Page Object Model (POM) design pattern and Page Factory for element initialization."**

Would you like a sample implementation or more details on any specific part?